#!/usr/bin/env python3

"""
Build a correct BEASTling model.

This auxiliary script uses both the original and the patched version
of BEASTling, combining the results by using temporary files.
While both versions of BEASTling can be used as Python libraries,
we just call the programs to make it easier to understand and tweak with.
"""

# Import Python standard libraries
from pathlib import Path
import glob
import logging
import subprocess


def main():
    """
    Script entry point.
    """
    # Grab the BAYES_PATH for the latestes release and a list of all configurations
    RELEASES_PATH = Path(__file__).parent.parent / "releases" / "*"
    release = sorted(glob.glob(str(RELEASES_PATH)))[-1]
    BAYES_PATH = Path(release) / "bayesian"

    confs = [Path(conf) for conf in glob.glob(str(BAYES_PATH / "*.conf"))]

    # Generate a first XML model with the patched version of beastling,
    # in order to obtain the correct matrix reading and save it for future
    # replacement
    for conf in confs:
        # Build files
        logging.info(f"Building BEASTling models for `{conf.name}`...")
        patch_file = f"{conf.stem}.patch.xml"
        vanilla_file = f"{conf.stem}.vanilla.xml"
        model_file = f"{conf.stem}.xml"

        subprocess.run(["beastling_patch", conf.name, "-o", patch_file], cwd=BAYES_PATH)
        subprocess.run(["beastling", conf.name, "-o", vanilla_file], cwd=BAYES_PATH)

        # Read data with question marks and delete file
        patch_file_path = BAYES_PATH / patch_file
        with open(patch_file_path) as handler:
            in_data = False
            data = []
            for line in handler.readlines():
                if '  <data id="data_' in line:
                    in_data = True
                elif "</data>" in line:
                    in_data = False
                elif in_data:
                    data.append(line)
        patch_file_path.unlink()

        # Read the vanilla file, replace contents, and delete the vanilla file
        vanilla_file_path = BAYES_PATH / vanilla_file
        with open(vanilla_file_path) as handler:
            in_data = False
            in_comment = False  # our files are not reproducible with beastling
            correct_lines = []
            for line in handler.readlines():
                if '  <data id="data_' in line:
                    correct_lines.append(line)
                    correct_lines += data
                    in_data = True
                    continue
                elif "</data>" in line:
                    correct_lines.append(line)
                    in_data = False
                    continue

                if "  <!--Generated by BEASTling" in line:
                    in_comment = True
                if in_comment and "-->" in line:
                    in_comment = False
                    continue

                if not in_data and not in_comment:
                    correct_lines.append(line)

        vanilla_file_path.unlink()

        # Output the correct file
        with open(BAYES_PATH / model_file, "w") as handler:
            handler.write("".join(correct_lines))


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
